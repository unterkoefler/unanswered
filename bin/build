#!/usr/bin/python3

import glob
import os
import subprocess
import sys
import yaml

GENERATED_DIR = 'src/Generated'

class Metadata(yaml.YAMLObject):
    yaml_tag = u'!Metadata'
    yaml_loader = yaml.SafeLoader
    def __init__(self, filename, title, description, show_on_home_page, slug):
        self.filename = filename
        self.title = title
        self.description = description
        self.show_on_home_page = show_on_home_page
        self.slug = slug
        self.date = None

    def __repr__(self):
        return "%s(title=%r, filename=%r, description=%r, show_on_home_page=%r, slug=%r)" % (
            self.__class__.__name__,
            self.title,
            self.filename,
            self.description,
            self.show_on_home_page,
            self.slug,
        )

    def date_to_elm(self):
        if self.date == None:
            return "Nothing"
        year = self.date["year"]
        month = self.date["month"]
        day = self.date["day"]
        return f"Just {{ year = {year}, month = {month}, day = {day} }}"

    def to_elm(self):
        return f"""
            ( "{self.slug}",
              {{ title = "{self.title}"
              , description = "{self.description}"
              , content = Generated.{self.filename}.content
              , showOnHomePage = {self.show_on_home_page}
              , date = {self.date_to_elm()}
              }}
            )
            """

def ensure_generated_dir_exists():
    os.makedirs(GENERATED_DIR, exist_ok=True)

def create_elm_file(filename, body):
    filepath = GENERATED_DIR + '/'  + filename + '.elm'
    elm_code = f"""
module Generated.{filename} exposing (content)

content : String
content =
    \"\"\"
{body}
    \"\"\"
"""
    with open(filepath, 'w') as file_handler:
        file_handler.write(elm_code)


def create_post_list_elm_file(posts):
    filepath = 'src/PostList.elm'
    with open(filepath, 'w') as file_handler:
        file_handler.write('module PostList exposing (all)\n')
        for post in posts:
            file_handler.write(f"import Generated.{post.filename}\n")

        file_handler.write("import InternalPost exposing (InternalPost)\n")
        file_handler.write("all : List (String, InternalPost)\n")
        file_handler.write("all = \n    [")
        file_handler.write(','.join([p.to_elm() for p in posts]))
        file_handler.write('   ]')

def process_file(filename):
    metadata, body = parse_file(filename)
    create_elm_file(metadata.filename, body)
    return metadata

def parse_file(filename):
    with open(filename) as file_handler:
        lines = [l.rstrip() for l in file_handler]
        metadata_start = lines.index('<!---')
        metadata_end = lines.index('--->')
        metadata = '\n'.join(lines[metadata_start + 1 :metadata_end])
        metadata = yaml.safe_load(metadata)
        metadata.date = date_from_filename(filename)
        body = '\n'.join(lines[metadata_end + 1:])
        return metadata, body


def date_from_filename(filename):
    """
    path/to/dir/2022-10-04-blog-post.md -> { "year": 2022, "month": 10, "day": 4 }
    path/to/dir/About.md -> None
    """
    filename = os.path.basename(filename)
    parts = filename.split("-")
    if len(parts) < 4:
        return None
    try:
        year = int(parts[0])
        month = int(parts[1])
        day = int(parts[2])
        return { "year": year, "month": month, "day": day }
    except ValueError:
        return None
            
def compile_elm(production):
    args = ['elm', 'make', 'src/Main.elm', '--output=main.js']
    if production:
        args.append('--optimize')

    subprocess.run(args, check=True)

def create_env_file(production):
    root_url = '/'
    env_file = 'src/Env.elm'
    with open(env_file, 'w') as file_handler:
        file_handler.write(f"""
module Env exposing (..)

rootUrl = "{root_url}"
""")

def print_slugs():
    for filename in filenames():
        metadata, _ = parse_file(filename)
        print(metadata.slug)

def filenames():
    posts = []
    markdown_files = glob.glob('src/markdown/*.md')
    ensure_generated_dir_exists()
    return sorted(markdown_files)

def main(*, production):
    posts = [ process_file(filename) for filename in filenames() ]
    create_post_list_elm_file(posts)

    create_env_file(production)
    compile_elm(production)

    print('Build complete!')


if __name__ == '__main__':
    if len(sys.argv) >= 2 and sys.argv[1] == '--debug':
        main(production=False)
    elif len(sys.argv) >= 2 and sys.argv[1] == "--slugs":
        print_slugs()
    else:
        main(production=True)
